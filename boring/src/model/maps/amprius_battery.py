import numpy as np

# Amprius ELD214 Power Cells

# Manufacturer:  Amprius, Inc
# Model:  ELD214
# Typical Capacity: 3.4 Ah (C/5)
# Charge Cutoff Voltage: 4.4 V
# Max Charge Current: 3.5 A (1C)
# Discharge Cutoff Voltage: 2.5V
# Max Discharge Current: 10.5 A (3C)
# Max Pulse Current: 17.5 A (5C assuming >30% SOC)
# Max Cell Surface Temp: 55Â°C
# Dimensions: 2.25" x 2" x 0.25"
# Mass: 31.6g


class MapData(object):
    pass  # hack to create data containers in python

battery = MapData()

# Map design point values
battery.defaults = {}
battery.defaults['T_bp'] = 20.0
battery.defaults['SOC_bp'] = 0.5
battery.defaults['tU_oc'] = 3.75
battery.defaults['tC_Th'] = 20000.
battery.defaults['tR_Th'] = 0.002
battery.defaults['tR_0'] = 0.009

# Amprius 4_19_19  ---> Q = 3.5 Ah
battery.T_bp = np.array([0., 20., 45., 60.])
battery.SOC_bp = np.array( [0.     , 0.03125, 0.0625 , 0.09375, 0.125  , 0.15625, 0.1875 , 0.21875,
 0.25   , 0.28125, 0.3125 , 0.34375, 0.375  , 0.40625, 0.4375 , 0.46875,
 0.5    , 0.53125, 0.5625 , 0.59375, 0.625  , 0.65625, 0.6875 , 0.71875,
 0.75   , 0.78125, 0.8125 , 0.84375, 0.875  , 0.90625, 0.9375 , 0.96875,
 1.     ] )
battery.tU_oc = np.array([ [3.414     ,3.414     ,3.414     ,3.414     ,3.42417391,3.44047826,
 3.4546087 ,3.46708696,3.47447826,3.483     ,3.49295652,3.50752174,
 3.53343478,3.55504348,3.58156522,3.60704348,3.63543478,3.66826087,
 3.70147826,3.73321739,3.76282609,3.81343478,3.87182609,3.91269565,
 3.95313043,3.99395652,4.04556522,4.09230435,4.13904348,4.18726087,
 4.23534783,4.28408696,4.371     ] ,  [3.36403181,3.37059332,3.37715483,3.38915138,3.41307423,3.43057158,
 3.4458017 ,3.45892471,3.47053977,3.4882561 ,3.50323489,3.51852094,
 3.53543796,3.55665986,3.57962513,3.6050448 ,3.63557688,3.66967577,
 3.70645387,3.74363574,3.78432556,3.83267577,3.88069459,3.92662513,
 3.972807  ,4.02052094,4.06885525,4.11641145,4.16327784,4.20705064,
 4.24888759,4.29225663,4.36      ] ,  [3.35947541,3.36927305,3.37804713,3.39274539,3.41529508,3.43271311,
 3.44734836,3.46041189,3.47172951,3.4903084 ,3.50470287,3.52008248,
 3.53732172,3.55863781,3.58149898,3.60732018,3.63787705,3.67212961,
 3.70881352,3.74582684,3.78658607,3.83510451,3.88277664,3.92849898,
 3.9745123 ,4.02208248,4.07013422,4.11750205,4.16411066,4.20763064,
 4.24926434,4.29245492,4.36      ],   [3.35947541,3.36927305,3.37804713,3.39274539,3.41529508,3.43271311,
 3.44734836,3.46041189,3.47172951,3.4903084 ,3.50470287,3.52008248,
 3.53732172,3.55863781,3.58149898,3.60732018,3.63787705,3.67212961,
 3.70881352,3.74582684,3.78658607,3.83510451,3.88277664,3.92849898,
 3.9745123 ,4.02208248,4.07013422,4.11750205,4.16411066,4.20763064,
 4.24926434,4.29245492,4.36      ] ])
battery.tC_Th = np.array([ [3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,
 3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,
 3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.] ,  [3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,
 3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,
 3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.] ,  [3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,
 3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,
 3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.],  [3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,
 3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,
 3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.,3000.] ])
battery.tR_Th = np.array([ [0.15782609,0.14695652,0.13608696,0.12521739,0.10869565,0.1       ,
 0.0926087 ,0.08173913,0.08      ,0.08      ,0.08      ,0.08      ,
 0.08      ,0.08      ,0.08      ,0.08      ,0.08      ,0.08      ,
 0.08      ,0.08      ,0.08      ,0.08      ,0.08      ,0.08      ,
 0.08      ,0.07804348,0.075     ,0.06652174,0.06      ,0.06      ,
 0.06      ,0.06      ,0.06      ] ,  [0.14989396,0.12802227,0.10615058,0.08713945,0.08      ,0.08      ,
 0.06299576,0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,
 0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,
 0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,
 0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,
 0.05      ,0.05      ,0.05      ] ,  [0.11672131,0.09494877,0.08      ,0.08      ,0.08      ,0.08      ,
 0.0591291 ,0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,
 0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,
 0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,
 0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,0.04265881,
 0.04      ,0.03088627,0.03      ],  [0.11672131,0.09494877,0.08      ,0.08      ,0.08      ,0.08      ,
 0.0591291 ,0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,
 0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,
 0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,
 0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,0.04265881,
 0.04      ,0.03088627,0.03      ] ])
battery.tR_0 = np.array([ [0.63391304,0.50347826,0.37304348,0.2426087 ,0.16869565,0.13717391,
 0.12130435,0.10347826,0.10913043,0.1       ,0.09913043,0.09      ,
 0.09      ,0.09      ,0.09      ,0.09      ,0.09      ,0.09      ,
 0.09      ,0.09      ,0.09      ,0.08      ,0.08      ,0.08      ,
 0.08      ,0.08      ,0.08      ,0.08      ,0.08      ,0.08      ,
 0.08      ,0.08      ,0.1       ] ,  [0.55925769,0.40615589,0.25305408,0.12426697,0.08120361,0.06790164,
 0.06      ,0.06      ,0.06      ,0.06      ,0.06      ,0.05982635,
 0.05435843,0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,
 0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,
 0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,0.05      ,
 0.05      ,0.05      ,0.05      ] ,  [0.4154918 ,0.21953893,0.07817623,0.06070184,0.05240779,0.04696465,
 0.045     ,0.045     ,0.04063525,0.04      ,0.04      ,0.04      ,
 0.0388627 ,0.035     ,0.035     ,0.035     ,0.035     ,0.035     ,
 0.035     ,0.03076076,0.03      ,0.03      ,0.03      ,0.03      ,
 0.03      ,0.03      ,0.03      ,0.03      ,0.03      ,0.03      ,
 0.03      ,0.03      ,0.03      ],  [0.4154918 ,0.21953893,0.07817623,0.06070184,0.05240779,0.04696465,
 0.045     ,0.045     ,0.04063525,0.04      ,0.04      ,0.04      ,
 0.0388627 ,0.035     ,0.035     ,0.035     ,0.035     ,0.035     ,
 0.035     ,0.03076076,0.03      ,0.03      ,0.03      ,0.03      ,
 0.03      ,0.03      ,0.03      ,0.03      ,0.03      ,0.03      ,
 0.03      ,0.03      ,0.03      ] ])

battery.units = {}
battery.units['T_bp'] = 'degC'
battery.units['tU_oc'] = 'V'
battery.units['tC_Th'] = 'F'
battery.units['tR_Th'] = 'ohm'
battery.units['tR_0'] = 'ohm'

# format for new regular grid interpolator:

battery.param_data = []
battery.output_data = []

battery.param_data.append({'name': 'T_bp', 'values': battery.T_bp,
                           'default': 20.0, 'units': 'degC'})
battery.param_data.append({'name': 'SOC_bp', 'values': battery.SOC_bp,
                           'default': 0.5, 'units': None})

battery.output_data.append({'name': 'C_Th', 'values': battery.tC_Th,
                            'default': 20000, 'units': 'F'})
battery.output_data.append({'name': 'R_Th', 'values': battery.tR_Th,
                            'default': 0.002, 'units': 'ohm'})
battery.output_data.append({'name': 'R_0', 'values': battery.tR_0,
                            'default': 0.009, 'units': 'ohm'})
battery.output_data.append({'name': 'U_oc', 'values': battery.tU_oc,
                            'default': 3.75, 'units': 'V'})