import numpy as np
import openmdao.api as om

timemin, timemax = 0.0, 60.0
ratiomin, ratiomax = 0.0, 2.0

train_time = np.array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27., 28., 29., 30., 31., 32., 33., 34., 35., 36., 37., 38., 39., 40., 41., 42., 43., 44., 45., 46., 47., 48., 49., 50., 51., 52., 53., 54., 55., 56., 57., 58., 59., 60])
train_ratio = np.array([0.5, 0.75, 1, 1.25, 1.5, 1.75, 2.0])


t_data = np.array(
    [
    [293.15,  293.2984739, 295.33441,   302.4282878, 314.473288,  327.708266,  340.3190001, 351.1479065, 359.7873155, 366.3050094, 371.0518968, 374.4682527, 376.9879232, 378.9879599, 380.3841539, 381.5575116, 382.5522994, 383.5081202, 384.463941,  385.3365905, 386.1226754, 386.9087602, 387.6948451, 388.48093,   389.2670148, 389.9976113, 390.6704556, 391.3432999, 392.0161441, 392.6889884, 393.3618327, 393.9896324, 394.5705497, 395.1514671, 395.7323844, 396.3133018, 396.8942191, 397.4601476, 398.0034528, 398.5373314, 399.0617834, 399.5768088, 400.0824076, 400.5757985, 401.0555647, 401.5241552, 401.9815698, 402.4278087, 402.8628717, 403.2864943, 403.6985416, 404.0992467, 404.4886095, 404.8666301, 405.2333085, 405.5899426, 405.9371934, 406.2739183, 406.6001173, 406.9157902, 407.2209373],
    [293.15,  293.9156189, 300.0807259, 314.2552988, 331.0516796, 345.8578117, 357.8917187, 366.8998106, 373.3455933, 377.8535182, 381.021119,  383.3343673, 385.1258972, 386.6317513, 387.7533163, 388.7768558, 389.8003953, 390.7797668, 391.6848522, 392.5899376, 393.4824301, 394.2514747, 395.0205193, 395.789564,  396.5586086, 397.3276532, 398.0862848, 398.7428382, 399.3993916, 400.055945,  400.7124984, 401.3690518, 402.0165374, 402.5751324, 403.1337275, 403.6923225, 404.2509176, 404.8095126, 405.3652403, 405.8873051, 406.3992015, 406.9009297, 407.3924895, 407.8738811, 408.3445725, 408.7988522, 409.2410777, 409.671249,  410.0893661, 410.4954289, 410.8894036, 411.2709252, 411.640272,  411.9974441, 412.3424416, 412.6752643, 412.9961867, 413.3081561, 413.6089239, 413.8984902, 414.1768549],
    [293.15,  294.7692893, 304.7245591, 323.0915891, 341.6221493, 357.2232293, 369.1941077, 377.8792359, 383.9934231, 388.2907259, 391.4016012, 393.8004728, 395.8061419, 397.3487971, 398.7738862, 399.9984842, 401.2225294, 402.4465745, 403.4956843, 404.4908077, 405.4859311, 406.4810545, 407.4761779, 408.4713012, 409.3282947, 410.1426603, 410.9570259, 411.7713915, 412.5857571, 413.4001227, 414.0982633, 414.7605361, 415.4228088, 416.0850816, 416.7473543, 417.4096271, 418.0319308, 418.6282585, 419.2091212, 419.7745189, 420.3244517, 420.8589196, 421.3714189, 421.8642265, 422.3390526, 422.7958975, 423.2347609, 423.655643,  424.0592165, 424.4452458, 424.813554,  425.1641411, 425.4970072, 425.8121522, 426.1144565, 426.4022116, 426.674134,  426.9302237, 427.1704806, 427.3949048, 427.6092447],
    [293.15,  295.7358955, 309.9466546, 335.6660931, 361.4825862, 382.990676,  399.8214205, 412.2296454, 421.1416965, 427.5569872, 432.3347821, 436.0954322, 439.2921995, 441.79704,   444.099442,  446.0724583, 448.0131845, 449.9539107, 451.6451833, 453.1490657, 454.6529481, 456.1568305, 457.6607128, 459.1645952, 460.4704859, 461.6276448, 462.7848036, 463.9419625, 465.0991214, 466.2562802, 467.2511161, 468.1240144, 468.9969128, 469.8698111, 470.7427095, 471.6156078, 472.4355721, 473.1936094, 473.9234325, 474.6250414, 475.2984361, 475.9436166, 476.5528248, 477.1247428, 477.6643115, 478.1715309, 478.646401,  479.0889218, 479.5031053, 479.8896331, 480.24595,   480.572056,  480.8679511, 481.1336354, 481.3779809, 481.6024949, 481.801527,  481.9750771, 482.1231452, 482.2457313, 482.3501653],
    [293.15,  296.8850201, 316.099278,  349.8316168, 383.2680091, 410.9086716, 432.5898918, 448.6863601, 460.4145209, 469.0396861, 475.6034276, 480.8636997, 485.4419228, 489.1315367, 492.1205118, 495.109487,  498.0984622, 500.6272167, 503.0730869, 505.518957,  507.7014609, 509.4612152, 511.2209695, 512.9807239, 514.7404782, 516.5002326, 518.0519192, 519.2696201, 520.4873211, 521.705022,  522.9227229, 524.1404239, 525.1936952, 525.9830279, 526.7723605, 527.5616931, 528.3510258, 529.1403584, 529.8792512, 530.5086941, 531.0969691, 531.6440762, 532.1500155, 532.614787,  533.0331077, 533.3987971, 533.7190069, 533.993737,  534.2229875, 534.4067584, 534.5514644, 534.6646105, 534.7375125, 534.7701706, 534.7625846, 534.7147547, 534.6361805, 534.5379759, 534.4072807, 534.244095,  534.0484188],
    [293.15,  298.3216914, 323.9543478, 367.284196,  408.8889908, 443.3974011, 470.2381359, 490.2998081, 505.1202238, 516.2546815, 524.9419532, 532.0469563, 538.2907413, 543.4791494, 547.4182305, 551.3573116, 555.2963926, 558.6587909, 561.6921056, 564.7254203, 567.7026393, 570.0051608, 572.3076823, 574.6102039, 576.7788069, 578.7258116, 580.5457009, 582.2384746, 583.8041328, 585.2426755, 586.5480241, 587.7178373, 588.7569255, 589.6652889, 590.4429273, 591.0898407, 591.6507722, 592.1429555, 592.530982,  592.8148517, 592.9945645, 593.0701204, 593.0871356, 593.0631802, 592.9621545, 592.7840585, 592.5288922, 592.1966557, 591.8247865, 591.4277048, 590.9757831, 590.4690214, 589.9074197, 589.2909779, 588.6482676, 587.9902936, 587.2944452, 586.5607223, 585.7891249, 584.979653,  584.1534559],
    [293.15,  300.2843191, 334.6900377, 390.4009905, 442.3138267, 485.2139716, 518.4973853, 543.519066,  562.2746266, 576.6655349, 588.1507893, 597.7239285, 606.1238714, 613.4332561, 619.9261352, 625.7158021, 631.0484705, 635.8139793, 640.0123286, 643.8652391, 647.2712805, 650.2162206, 652.797323,  655.2237274, 657.3429253, 659.1549165, 660.6597012, 661.8572793, 662.8252109, 663.6994941, 664.3427371, 664.7549399, 664.9361025, 664.8862248, 664.6862532, 664.4781232, 664.1184446, 663.6072175, 662.9444419, 662.1301177, 661.2222293, 660.3224495, 659.3280635, 658.2390714, 657.055473,  655.7772684, 654.4436729, 653.1234486, 651.7471285, 650.3147129, 648.8262016, 647.2815946, 645.7067323, 644.1469241, 642.5563963, 640.9351486, 639.2831812, 637.600494,  635.9038972, 634.2228663, 632.5276237]
    ])

prob = om.Problem()
mm = prob.model.add_subsystem('mm', om.MetaModelStructuredComp(method='cubic'),
                            promotes=['time', 'ratio'])
mm.add_input('ratio', 1.0, train_ratio)
mm.add_input('time', 1.0, train_time)

mm.add_output('temperature', 300.0, t_data)

prob.setup()
prob.final_setup()